version: '3.4'

services:
  db_server:
    image: postgres:latest
    container_name: db_server
    environment:
      POSTGRES_DB: strapi
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/db
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - ${DB_DATA_DIR}:/data/db
    restart: unless-stopped

  db_adminer:
    image: dpage/pgadmin4:latest
    container_name: db_adminer
    depends_on:
      - db_server
    environment:
      PGADMIN_DEFAULT_EMAIL: ${EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PASSWORD}
    expose:
      - 80
    restart: unless-stopped

  server:
    image: strapi/strapi
    container_name: server
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_NAME: strapi
      DATABASE_HOST: db_server
      DATABASE_PORT: 5432
      DATABASE_USERNAME: admin
      DATABASE_PASSWORD: password
    expose:
      - 1337
    volumes:
      - ${STRAPI_APP_DIR}:/srv/app
    depends_on:
      - db_server
    restart: unless-stopped
  
  jenkins:
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    container_name: jenkins
    expose:
      - 8080
      - 50000
    volumes:
      - ${JENKINS_DATA_DIR}:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  
  nginx:
    image: nginx:latest
    container_name: nginx
    environment:
      STRAPI_DOMAIN: ${STRAPI_DOMAIN}
      # URL format http://${service name}:${service exposed port}
      # more about docker network see https://docs.docker.com/compose/networking/
      WEB_DOMAIN: ${WEB_DOMAIN}
      JENKINS_DOMAIN: ${JENKINS_DOMAIN}
      DB_ADMIN_DOMAIN: ${DB_ADMIN_DOMAIN}
      STRAPI_SERVER: http://server:1337
      DB_ADMIN_SERVER: http://db_adminer:80
      JENKINS_SERVER: http://jenkins:8080
    volumes:
      - ./product-nginx-conf-templates:/etc/nginx/templates
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ${PUBLIC_DIR}:/var/www/html
      - ./certbot/conf:/etc/nginx/ssl
      - ./certbot/data:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    depends_on:
      - server
      - jenkins
      - db_adminer
    restart: unless-stopped

  certbot:
      image: certbot/certbot:latest
      container_name: certbot
      # Helps us to checking every 12 hours to see if new SSL certificates are needed;
      entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;"
      volumes:
          - ./certbot/conf:/etc/letsencrypt
          - ./certbot/logs:/var/log/letsencrypt
          - ./certbot/data:/var/www/certbot
      depends_on:
        - nginx
      restart: unless-stopped
  
  # For getting updated certificates from  Nginx we need to add this service
  # https://github.com/apogiatzis/docker-compose-livereloader
  # reloader:
  #   image: apogiatzis/livereloading
  #   container_name: reloader
  #   privileged: true
  #   environment:
  #     - RELOAD_DELAY=60           # seconds
  #     - RELOAD_CONTAINER=nginx
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./certbot/conf/live:/code
  #   restart: unless-stopped
